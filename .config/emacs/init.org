* Set exec path = PATH
Exec path used by emacs needs to be configured to load path from shell
#+begin_src emacs-lisp :tangle lisp/exec-path.el
  (straight-use-package 'exec-path-from-shell)
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))
  (when (daemonp)
    (exec-path-from-shell-initialize))
#+end_src
* Ace-window - Easily switch windows
#+begin_src emacs-lisp :tangle lisp/ace-window.el
  (straight-use-package 'ace-window)
  (global-set-key (kbd "M-o") #'ace-window)
#+end_src
* GPG 
** Setting up .authinfo file
#+begin_src emacs-lisp :tangle lisp/gpg.el
  (setq auth-sources '("~/.authinfo"))
#+end_src
** Allow pinentry prompt for gpg passphrases
#+begin_src emacs-lisp :tangle lisp/gpg.el
  (setq epa-pinentry-mode 'loopback)
#+end_src
* Allow ansi-colors in log files
#+begin_src emacs-lisp :tangle lisp/ansi-support-in-buffers.el
  (add-hook 'find-file-hook
    (lambda ()
      (when (string-match "\\.log\\'" (buffer-file-name))
        (ansi-color-apply-on-region (point-min) (point-max)))))
#+end_src
* Wgrep - write in grep buffers
#+begin_src emacs-lisp :tangle lisp/wgrep.el
  (straight-use-package 'wgrep)
  (require 'wgrep)
#+end_src
* Call functions in popup windows
#+begin_src emacs-lisp :tangle lisp/popup-function-calls.el
  (defun jarodevs-window-delete-popup-frame (&rest _)
    "Kill selected selected frame if it has parameter `jarodevs-window-popup-frame'.
  Use this function via a hook."
    (when (frame-parameter nil jarodevs-window-popup-frame)
      (delete-frame)))

  (defmacro jarodevs-window-define-with-popup-frame (command)
    "Define interactive function which calls COMMAND in a new frame.
  Make the new frame have the `jarodevs-window-popup-frame' parameter."
    `(defun ,(intern (format "jarodevs-window-popup-%s" command)) ()
       ,(format "Run `%s' in a popup frame with `jarodevs-window-popup-frame' parameter.
  Also see `jarodevs-window-delete-popup-frame'." command)
       (interactive)
       (let ((frame (make-frame '((jarodevs-window-popup-frame . t)))))
         (select-frame frame)
         (switch-to-buffer " jarodevs-window-hidden-buffer-for-popup-frame")
         (condition-case nil
             (call-interactively ',command)
           ((quit error user-error)
            (delete-frame frame))))))

  (declare-function org-capture "org-capture" (&optional goto keys))
  (defvar org-capture-after-finalize-hook)
  (jarodevs-window-define-with-popup-frame org-capture)
  (add-hook 'org-capture-after-finalize-hook #'jarodevs-window-delete-popup-frame)
#+end_src
* Evil Mode
#+begin_src emacs-lisp :tangle lisp/evil.el
  (straight-use-package 'evil)
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (require 'evil)
  (evil-mode 1)

  (straight-use-package 'evil-collection)
  (require 'evil-collection)
  (evil-collection-init)
#+end_src

* Appearance
** Global ui tweaks
#+begin_src emacs-lisp :tangle lisp/appearance.el
  (setq-default indent-tabs-mode nil)
  (global-display-line-numbers-mode)
  (column-number-mode 1)
  (show-paren-mode 1)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src
** Font configuration
#+begin_src emacs-lisp :tangle lisp/appearance.el
  (add-to-list 'default-frame-alist '(font . "JetBrainsMono Nerd Font Mono-15"))
#+end_src

** Theme configuration
#+begin_src emacs-lisp :tangle lisp/appearance.el
  (straight-use-package 'modus-themes)
  (straight-use-package 'dracula-theme)
  (straight-use-package 'doom-themes)
  (straight-use-package 'apropospriate-theme)
  (straight-use-package 'gruber-darker-theme)

  (setq custom-safe-theme t)
  (require 'doom-themes)
  (load-theme 'doom-gruvbox t)
#+end_src
** Distinguish write buffers from others
#+begin_src emacs-lisp :tangle lisp/appearance.el
  (straight-use-package 'solaire-mode)
  (require 'solaire-mode)
  (solaire-global-mode +1)
#+end_src
** Dim non focused buffers
#+begin_src emacs-lisp :tangle lisp/appearance.el
  (straight-use-package 'dimmer)
  (require 'dimmer)
  (dimmer-configure-which-key)
  (dimmer-mode 1)
#+end_src
** Colorize compilation buffer
There are two parts in this: 
#+begin_src emacs-lisp :tangle lisp/appearance.el
  ;; Stolen from (http://endlessparentheses.com/ansi-colors-in-the-compilation-buffer-output.html)
  (require 'ansi-color)
  (defun endless/colorize-compilation ()
    "Colorize from `compilation-filter-start' to `point'."
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region
       compilation-filter-start (point))))

  (add-hook 'compilation-filter-hook
            #'endless/colorize-compilation)
#+end_src
Next, filter out unwanted ANSI escape sequences, like the ones intended for ttys but Emacs doesn't know/care about:
#+begin_src emacs-lisp :tangle lisp/appearance.el
  ;; Stolen from (https://oleksandrmanzyuk.wordpress.com/2011/11/05/better-emacs-shell-part-i/)
  (defun regexp-alternatives (regexps)
    "Return the alternation of a list of regexps."
    (mapconcat (lambda (regexp)
                 (concat "\\(?:" regexp "\\)"))
               regexps "\\|"))

  (defvar non-sgr-control-sequence-regexp nil
    "Regexp that matches non-SGR control sequences.")

  (setq non-sgr-control-sequence-regexp
        (regexp-alternatives
         '(;; icon name escape sequences
           "\033\\][0-2];.*?\007"
           ;; non-SGR CSI escape sequences
           "\033\\[\\??[0-9;]*[^0-9;m]"
           ;; noop
           "\012\033\\[2K\033\\[1F"
           )))

  (defun filter-non-sgr-control-sequences-in-region (begin end)
    (save-excursion
      (goto-char begin)
      (while (re-search-forward
              non-sgr-control-sequence-regexp end t)
        (replace-match ""))))

  (defun filter-non-sgr-control-sequences-in-output (ignored)
    (let ((start-marker
           (or comint-last-output-start
               (point-min-marker)))
          (end-marker
           (process-mark
            (get-buffer-process (current-buffer)))))
      (filter-non-sgr-control-sequences-in-region
       start-marker
       end-marker)))

  (add-hook 'comint-output-filter-functions
            'filter-non-sgr-control-sequences-in-output)
#+end_src
* Minibuffer
** Vertical completion
Vertico Setup
#+begin_src emacs-lisp :tangle lisp/minibuffer.el
  (straight-use-package 'vertico)
  (require 'vertico)
  (vertico-mode)

  ;; Setup indicator of current candidate
  (defvar +vertico-current-arrow t)
  (cl-defmethod vertico--format-candidate :around
    (cand prefix suffix index start &context ((and +vertico-current-arrow
						   (not (bound-and-true-p vertico-flat-mode)))
					      (eql t)))
    (setq cand (cl-call-next-method cand prefix suffix index start))
    (if (bound-and-true-p vertico-grid-mode)
	(if (= vertico--index index)
	    (concat #("â–¶" 0 1 (face vertico-current)) cand)
	  (concat #("_" 0 1 (display " ")) cand))
      (if (= vertico--index index)
	  (concat
	   #(" " 0 1 (display (left-fringe right-triangle vertico-current)))
	   cand)
	cand)))

#+end_src 

Persists history
#+begin_src emacs-lisp :tangle lisp/minibuffer.el
  (straight-use-package 'savehist)
  (require 'savehist)
  (savehist-mode)
#+end_src
Candidate documentation annotation
#+begin_src emacs-lisp :tangle lisp/minibuffer.el
  (straight-use-package 'marginalia)
  ;; Activate marginalia-mode right away.
  (marginalia-mode)
#+end_src
** Search & Navigation commands
*** Consult setup
#+begin_src emacs-lisp :tangle lisp/minibuffer.el
  (straight-use-package 'consult)
  ;; Load consult package
  (require 'consult)

  ;; Replace bindings
  (global-set-key (kbd "C-c M-x") #'consult-mode-command)
  (global-set-key (kbd "C-c h") #'consult-history)
  (global-set-key (kbd "C-c k") #'consult-kmacro)
  (global-set-key (kbd "C-c m") #'consult-man)
  (global-set-key (kbd "C-c i") #'consult-info)
  (global-set-key [remap Info-search] #'consult-info)

  (global-set-key (kbd "C-x M-:") #'consult-complex-command)     ;; orig. repeat-complex-command
  (global-set-key (kbd "C-x b") #'consult-buffer)                ;; orig. switch-to-buffer
  (global-set-key (kbd "C-x 4 b") #'consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
  (global-set-key (kbd "C-x 5 b") #'consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
  (global-set-key (kbd "C-x t b") #'consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
  (global-set-key (kbd "C-x r b") #'consult-bookmark)            ;; orig. bookmark-jump
  (global-set-key (kbd "C-x p b") #'consult-project-buffer)      ;; orig. project-switch-to-buffer

  ;; Custom M-# bindings for fast register access
  (global-set-key (kbd "M-#") #'consult-register-load)
  (global-set-key (kbd "M-'") #'consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
  (global-set-key (kbd "C-M-#") #'consult-register)

  ;; Other custom bindings
  (global-set-key (kbd "M-y") #'consult-yank-pop)                ;; orig. yank-pop

  ;; M-g bindings in `goto-map'
  (global-set-key (kbd "M-g e") #'consult-compile-error)
  (global-set-key (kbd "M-g f") #'consult-flymake)               ;; Alternative: consult-flycheck
  (global-set-key (kbd "M-g g") #'consult-goto-line)             ;; orig. goto-line
  (global-set-key (kbd "M-g M-g") #'consult-goto-line)           ;; orig. goto-line
  (global-set-key (kbd "M-g o") #'consult-outline)               ;; Alternative: consult-org-heading
  (global-set-key (kbd "M-g m") #'consult-mark)
  (global-set-key (kbd "M-g k") #'consult-global-mark)
  (global-set-key (kbd "M-g i") #'consult-imenu)
  (global-set-key (kbd "M-g I") #'consult-imenu-multi)

  ;; M-s bindings in `search-map'
  (global-set-key (kbd "M-s d") #'consult-find)                  ;; Alternative: consult-fd
  (global-set-key (kbd "M-s c") #'consult-locate)
  (global-set-key (kbd "M-s g") #'consult-grep)
  (global-set-key (kbd "M-s G") #'consult-git-grep)
  (global-set-key (kbd "M-s r") #'consult-ripgrep)
  (global-set-key (kbd "M-s l") #'consult-line)
  (global-set-key (kbd "M-s L") #'consult-line-multi)
  (global-set-key (kbd "M-s k") #'consult-keep-lines)
  (global-set-key (kbd "M-s u") #'consult-focus-lines)

  ;; Isearch integration
  (global-set-key (kbd "M-s e") #'consult-isearch-history)
  (define-key isearch-mode-map (kbd "M-e") #'consult-isearch-history)  ;; orig. isearch-edit-string
  (define-key isearch-mode-map (kbd "M-s e") #'consult-isearch-history) ;; orig. isearch-edit-string
  (define-key isearch-mode-map (kbd "M-s l") #'consult-line)            ;; needed by consult-line to detect isearch
  (define-key isearch-mode-map (kbd "M-s L") #'consult-line-multi)      ;; needed by consult-line to detect isearch

  ;; Minibuffer history
  (define-key minibuffer-local-map (kbd "M-s") #'consult-history)       ;; orig. next-matching-history-element
  (define-key minibuffer-local-map (kbd "M-r") #'consult-history)       ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  (add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))

  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
#+end_src
*** Orderless
**** Base configuration
#+begin_src emacs-lisp :tangle lisp/minibuffer.el
  (straight-use-package 'orderless)
  (require 'orderless)
  (defun +orderless--consult-suffix ()
    "Regexp which matches the end of string with Consult tofu support."
    (if (and (boundp 'consult--tofu-char) (boundp 'consult--tofu-range))
        (format "[%c-%c]*$"
                consult--tofu-char
                (+ consult--tofu-char consult--tofu-range -1))
      "$"))

  ;; Recognizes the following patterns:
  ;; * .ext (file extension)
  ;; * regexp$ (regexp matching at end)
  (defun +orderless-consult-dispatch (word _index _total)
    (cond
     ;; Ensure that $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" word)
      `(orderless-regexp . ,(concat (substring word 0 -1) (+orderless--consult-suffix))))
     ;; File extensions
     ((and (or minibuffer-completing-file-name
               (derived-mode-p 'eshell-mode))
           (string-match-p "\\`\\.." word))
      `(orderless-regexp . ,(concat "\\." (substring word 1) (+orderless--consult-suffix))))))

  ;; Define orderless style with initialism by default
  (orderless-define-completion-style +orderless-with-initialism
    (orderless-matching-styles '(orderless-initialism orderless-literal orderless-regexp)))

  ;; You may want to combine the `orderless` style with `substring` and/or `basic`.
  ;; There are many details to consider, but the following configurations all work well.
  ;; Personally I (@minad) use option 3 currently. Also note that you may want to configure
  ;; special styles for special completion categories, e.g., partial-completion for files.
  ;;
  ;; 1. (setq completion-styles '(orderless))
  ;; This configuration results in a very coherent completion experience,
  ;; since orderless is used always and exclusively. But it may not work
  ;; in all scenarios. Prefix expansion with TAB is not possible.
  ;;
  ;; 2. (setq completion-styles '(substring orderless))
  ;; By trying substring before orderless, TAB expansion is possible.
  ;; The downside is that you can observe the switch from substring to orderless
  ;; during completion, less coherent.
  ;;
  ;; 3. (setq completion-styles '(orderless basic))
  ;; Certain dynamic completion tables (completion-table-dynamic)
  ;; do not work properly with orderless. One can add basic as a fallback.
  ;; Basic will only be used when orderless fails, which happens only for
  ;; these special tables.
  ;;
  ;; 4. (setq completion-styles '(substring orderless basic))
  ;; Combine substring, orderless and basic.
  ;;
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        ;;; Enable partial-completion for files.
        ;;; Either give orderless precedence or partial-completion.
        ;;; Note that completion-category-overrides is not really an override,
        ;;; but rather prepended to the default completion-styles.
        ;; completion-category-overrides '((file (styles orderless partial-completion))) ;; orderless is tried first
        completion-category-overrides '((file (styles partial-completion)) ;; partial-completion is tried first
                                        ;; enable initialism by default for symbols
                                        (command (styles +orderless-with-initialism))
                                        (variable (styles +orderless-with-initialism))
                                        (symbol (styles +orderless-with-initialism)))
        orderless-component-separator #'orderless-escapable-split-on-space ;; allow escaping space with backslash!
        orderless-style-dispatchers (list #'+orderless-consult-dispatch
                                          #'orderless-affix-dispatch))
#+end_src

**** Use Orderless as pattern compiler for consult-grep/ripgrep/find 
#+begin_src emacs-lisp :tangle lisp/minibuffer.el (straight-use-package 'orderless)
  (defun consult--orderless-regexp-compiler (input type &rest _config)
    (setq input (orderless-pattern-compiler input))
    (cons
     (mapcar (lambda (r) (consult--convert-regexp r type)) input)
     (lambda (str) (orderless--highlight input t str))))

  ;; OPTION 1: Activate globally for all consult-grep/ripgrep/find/...
  ;; (setq consult--regexp-compiler #'consult--orderless-regexp-compiler)

  ;; OPTION 2: Activate only for some commands, e.g., consult-ripgrep!
  (defun consult--with-orderless (&rest args)
    (minibuffer-with-setup-hook
        (lambda ()
          (setq-local consult--regexp-compiler #'consult--orderless-regexp-compiler))
      (apply args)))
  (advice-add #'consult-ripgrep :around #'consult--with-orderless)
#+end_src
** Display time
#+begin_src emacs-lisp :tangle lisp/minibuffer.el
  (display-time)
#+end_src
* Embark
#+begin_src emacs-lisp :tangle lisp/embark.el
  (straight-use-package 'embark)

  ;; Key bindings for Embark
  (global-set-key (kbd "C-.") #'embark-act)         ;; pick some comfortable binding
  (global-set-key (kbd "C-;") #'embark-dwim)        ;; good alternative: M-.
  (global-set-key (kbd "C-h B") #'embark-bindings)  ;; alternative for `describe-bindings'

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc. 
  ;; Uncomment the following lines if you want to use Eldoc integration:
  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  ;; Install embark-consult package
  (straight-use-package 'embark-consult)

  ;; Enable consult-preview-at-point-mode in embark-collect-mode
  (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode)
#+end_src

* Org mode
** Global configurations
#+begin_src emacs-lisp :tangle lisp/org.el
    (straight-use-package 'org)
    (require 'org)
    (add-hook 'org-mode-hook 'org-indent-mode)
    (setq org-agenda-files '("~/Documents/org/"))
    (evil-set-initial-state 'org-agenda-mode 'normal)

    (straight-use-package 'org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

    (straight-use-package 'org-fancy-priorities)
    (add-hook 'org-mode-hook 'org-fancy-priorities-mode)
    (setq org-fancy-priorities-list '("ðŸ…°" "ðŸ…±" "ðŸ…²" "ðŸ…³" "ðŸ…´"))
    ;; Diminishing hides the mode from the modeline
    (when (featurep 'diminish)
      (diminish 'org-fancy-priorities-mode))

    (add-hook 'org-mode-hook
      (lambda ()
        (push '("[-]" .  "ó°±‘") prettify-symbols-alist)
        (push '("[ ]" .  "î™€") prettify-symbols-alist)
        (push '("[X]" . "ï’§" ) prettify-symbols-alist)
        (setq electric-pair-mode nil)
        (prettify-symbols-mode)))

    (setq org-todo-keywords
          '((sequence "TODO" "PROGRESS" "DONE")))
    (setq org-todo-keyword-faces
          '(("TODO" . (:foreground "yellow" :background "unspecified" :box (:line-width 1 :color "yellow")))
            ("PROGRESS" . (:foreground "white" :background "DodgerBlue1"))
            ("DONE" . (:foreground "dark gray" :background "unspecified" :box(:line-width 1 :color "dark gray")))))

    (add-hook 'org-after-todo-state-change-hook
              (lambda ()
                (when (string= (org-get-todo-state) "PROGRESS")
                  (unless (org-clocking-p)
                    (org-clock-in)))))

#+end_src
** Clocking in work time
#+begin_src emacs-lisp :tangle lisp/org.el
  ;;(setq org-clock-persist 'history)
  ;;(org-clock-persistence-insinuate)
#+end_src
** Timeblock view
#+begin_src emacs-lisp :tangle lisp/org.el
  (straight-use-package 'org-timeblock)
  (require 'org-timeblock)
  (setq org-timeblock-span 1)
  (add-hook 'org-timeblock-mode-hook
            (lambda()
              (setq blink-cursor-mode nil)))
  (add-hook 'org-timeblock-mode-hook
            (lambda ()
              (evil-define-key 'normal org-timeblock-mode-map
                (kbd "g r") 'org-timeblock-redraw-buffers)))
#+end_src
** Alerts
#+begin_src emacs-lisp :tangle lisp/org.el
  (straight-use-package 'alert)
  (require 'alert)
  (setq alert-default-style 'osx-notifier)
  (straight-use-package 'org-wild-notifier)
  (require 'org-wild-notifier)
  (setq org-wild-notifier-keyword-whitelist '("TODO" "PROGR"))
  (org-wild-notifier-mode)
#+end_src
* Calendar 
** Calfw
#+begin_src emacs-lisp :tangle lisp/calendar.el
  (straight-use-package 'calfw)
  (require 'calfw)
  (straight-use-package 'calfw-org)
  (require 'calfw-org)
  (defun cfw:open-custom-calendar ()
    (interactive)
    (cfw:open-calendar-buffer
     :contents-sources
     (list
      (cfw:org-create-source "khaki1")  ; orgmode source
     ))) 
#+end_src
** Configure holidays
#+begin_src emacs-lisp :tangle lisp/calendar.el
  (setq holiday-bahai-holidays nil
        holiday-general-holidays nil)

  (setq holiday-local-holidays
        '((holiday-fixed 1 1 "Jour de l'An")
          (holiday-fixed 5 1 "FÃªte du Travail")
          (holiday-fixed 5 8 "Victoire 1945")
          (holiday-fixed 7 14 "FÃªte Nationale")
          (holiday-fixed 8 15 "Assomption")
          (holiday-fixed 11 1 "Toussaint")
          (holiday-fixed 11 11 "Armistice 1918")
          (holiday-fixed 12 25 "NoÃ«l")
          ;; FÃªtes religieuses mobiles
          (holiday-easter-etc -2 "Vendredi Saint")
          (holiday-easter-etc 0 "PÃ¢ques")
          (holiday-easter-etc 1 "Lundi de PÃ¢ques")
          (holiday-easter-etc 39 "Ascension")
          (holiday-easter-etc 50 "Lundi de PentecÃ´te")))

  (setq calendar-holidays (append holiday-local-holidays holiday-other-holidays))
#+end_src
* Help utilities 
#+begin_src emacs-lisp :tangle lisp/help-utilities.el
  (straight-use-package 'which-key)
  (require 'which-key)
  (which-key-mode)

  (straight-use-package 'helpful)
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command)
  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  ;; Look up *F*unctions (excludes macros).
  ;;
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)
#+end_src

* Versionning
** Magit
#+begin_src emacs-lisp :tangle lisp/versionning.el
  (straight-use-package 'magit)
  (setq display-line-numbers-type 'visual
        magit-section-disable-line-numbers nil
        magit-process-finish-apply-ansi-colors t
        magit-show-long-lines-warning nil)
  (evil-define-key 'normal magit-section-mode-map (kbd "1") nil)
  (evil-define-key 'normal magit-section-mode-map (kbd "2") nil)
  (evil-define-key 'normal magit-section-mode-map (kbd "3") nil)
  (evil-define-key 'normal magit-section-mode-map (kbd "4") nil)
#+end_src
** Git share code
#+begin_src emacs-lisp :tangle lisp/versionning.el
  (straight-use-package
   '(git-share :type git :host github :repo "mgmarlow/git-share"))
  (require 'git-share)
#+end_src
** Forge - Create pull requests and interact with versioning services
#+begin_src emacs-lisp :tangle lisp/versionning.el
  (straight-use-package 'forge)
  (with-eval-after-load 'magit
    (require 'forge))
  (setq forge-buffer-draft-p t)
#+end_src
* Project
#+begin_src emacs-lisp :tangle lisp/project.el
  (setq project-switch-commands '(
    (magit-project-status "Magit" "m")
    (project-find-file "Find" "f")
    (project-dired "Dired" "d")))
#+end_src
* Coding
** Code folding
#+begin_src emacs-lisp :tangle lisp/coding.el
  (add-hook 'terraform-mode-hook #'outline-minor-mode)
#+end_src

** LSP Client
#+begin_src emacs-lisp :tangle lisp/coding.el
  (add-hook 'typescript-ts-mode-hook 'eglot-ensure)
  (setq eglot-confirm-server-initiated-edits nil)
  (global-set-key (kbd "M-s f") #'eglot-code-action-quickfix)
#+end_src
** Python mode
*** LSP Server
#+begin_src emacs-lisp :tangle lisp/coding.el
  (add-hook 'python-mode-hook 'eglot-ensure)
  (with-eval-after-load 'eglot
    (add-to-list 'eglot-server-programs
                 '(python-mode . ("ruff" "server"))))
#+end_src

** Typescript mode
Enable typescript-ts-mode on ts(x) files
#+begin_src emacs-lisp :tangle lisp/coding.el
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-ts-mode))
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . tsx-ts-mode))
#+end_src

Prettier
#+begin_src emacs-lisp :tangle lisp/coding.el
  (straight-use-package 'prettier-js)
  (add-hook 'typescript-ts-mode-hook 'prettier-js-mode)
  (add-hook 'tx-ts-mode-hook 'prettier-js-mode)
#+end_src

Global typescript usefull variables
#+begin_src emacs-lisp :tangle lisp/coding.el
  (setq typescript-ts-mode-indent-offset 4)
  (add-hook 'typescript-ts-mode-hook 'electric-pair-mode)
#+end_src
** Code completion
#+begin_src emacs-lisp :tangle lisp/coding.el
  (straight-use-package 'corfu)
  (global-corfu-mode)
  (setq corfu-auto t)
#+end_src
Kind icons
#+begin_src emacs-lisp :tangle lisp/coding.el
  (straight-use-package 'kind-icon)
  (with-eval-after-load 'corfu
    (require 'kind-icon)
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
** Terraform mode
#+begin_src emacs-lisp :tangle lisp/coding.el
  (straight-use-package 'terraform-mode)
  (require 'terraform-mode)
#+end_src
** Snippets
#+begin_src emacs-lisp :tangle lisp/coding.el
  (straight-use-package 'yasnippet)
  (require 'yasnippet)
  (yas-global-mode 1)
  (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
#+end_src
** Github Copilot
#+begin_src emacs-lisp :tangle lisp/coding.el
  (straight-use-package
   '(copilot-chat
     :type git
     :host github
     :repo "chep/copilot-chat.el"
     :files ("*.el")))
#+end_src
* Text editing
** Markdown
#+begin_src emacs-lisp :tangle lisp/text-editing.el
  (straight-use-package 'markdown-mode)
  (require 'markdown-mode)
#+end_src
* Docker
Manage docker containers from emacs
#+begin_src emacs-lisp :tangle lisp/docker.el
  (straight-use-package 'docker)
  (require 'docker)
  (global-set-key (kbd "C-c d") #'docker)
  (setq docker-compose-command "docker compose")
#+end_src
* VTerm
Multi Vterm management
#+begin_src emacs-lisp :tangle lisp/vterm.el
  (straight-use-package 'multi-vterm)
  (require 'multi-vterm)
  #+end_src

* Package Manager - Straight.el 
#+begin_src emacs-lisp :tangle lisp/straight.el
  (setq package-enable-at-startup nil)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Custom commands
** Starting Gorgias docker containers
#+begin_src emacs-lisp :tangle lisp/custom-commands.el
  (defun run-docker-compose (command success-message)
    "Helper function to run docker-compose commands asynchronously and show a success message."
    (start-process-shell-command
     "docker-compose-process"  ;; Name of the process
     nil                        ;; No associated buffer
     command)                   ;; Command to run
    (message success-message))  ;; Message to show when done

  (defun start-ai-agent ()
    "Run docker-compose up for the ai-agent service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/ai-agent/docker-compose.yml up -d"
                        "AI Agent service is starting..."))

  (defun stop-ai-agent ()
    "Run docker-compose down for the ai-agent service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/ai-agent/docker-compose.yml stop"
                        "AI Agent service is stopping..."))

  (defun start-helpdesk ()
    "Run docker-compose up for the helpdesk service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/helpdesk/docker-compose.yml up -d"
                        "Helpdesk service is starting..."))

  (defun stop-helpdesk ()
    "Run docker-compose down for the helpdesk service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/helpdesk/docker-compose.yml stop"
                        "Helpdesk service is stopping..."))

  (defun start-chat ()
    "Run docker-compose up for the gorgias chat service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/gorgias-chat/docker-compose.yml up -d"
                        "Gorgias chat service is starting..."))

  (defun stop-chat ()
    "Run docker-compose down for the gorgias chat service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/gorgias-chat/docker-compose.yml stop"
                        "Gorgias chat service is stopping..."))

  (defun start-help-center ()
    "Run docker-compose up for the help center service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/help-center/docker-compose.yml up -d"
                        "Help Center service is starting..."))

  (defun stop-help-center ()
    "Run docker-compose down for the help center service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/help-center/docker-compose.yml stop"
                        "Help Center service is stopping..."))

  (defun start-workflows ()
    "Run docker-compose up for the workflows service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/workflows/docker-compose.yml up -d"
                        "Workflows service is starting..."))

  (defun stop-workflows ()
    "Run docker-compose down for the workflows service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/workflows/docker-compose.yml stop"
                        "Workflows service is stopping..."))

  (defun start-incoming ()
    "Run docker-compose up for the incoming service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/gorgias-incoming/docker-compose.yml up -d"
                        "Incoming service is starting..."))

  (defun stop-incoming ()
    "Run docker-compose down for the incoming service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/gorgias-incoming/docker-compose.yml stop"
                        "Incoming service is stopping..."))

  (defun start-sendgrid-inbound ()
    "Run docker-compose up for the sendgrid inbound service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/sendgrid-inbound/docker-compose.yml up -d"
                        "Sendgrid Inbound service is starting..."))

  (defun stop-sendgrid-inbound ()
    "Run docker-compose down for the sendgrid inbound service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/sendgrid-inbound/docker-compose.yml stop"
                        "Sendgrid Inbound service is stopping..."))

  (defun start-account-manager ()
    "Run docker-compose up for the account manager service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/gorgias-account-manager/docker-compose.yml up -d"
                        "Account Manager service is starting..."))

  (defun stop-account-manager ()
    "Run docker-compose down for the account manager service."
    (interactive)
    (run-docker-compose "docker compose -f ~/gorgias/gorgias-account-manager/docker-compose.yml stop"
                        "Account Manager service is stopping..."))
#+end_src
** Start ngrok 
#+begin_src emacs-lisp :tangle lisp/custom-commands.el
  (defvar ngrok-ai-agent-process nil "Process handle for ai-agent ngrok.")
  (defvar ngrok-helpdesk-process nil "Process handle for helpdesk ngrok.")
  (defvar ngrok-chat-process nil "Process handle for chat ngrok.")

  (defun start-ngrok-ai-agent ()
    "Start ngrok for the ai-agent."
    (interactive)
    (setq ngrok-ai-agent-process
          (start-process-shell-command
           "ngrok-ai-agent-process"  ;; Name of the process
           nil                       ;; No associated buffer
           "cd ~/gorgias/ai-agent && ngrok start --all --config aria-ngrok.yml --log=stdout > /tmp/ngrok-ai-agent.log"))
    (message "Ngrok for ai-agent is starting... Logs available -> /tmp/ngrok-ai-agent.log"))

  (defun stop-ngrok-ai-agent ()
    "Stop ngrok for the ai-agent."
    (interactive)
    (when (process-live-p ngrok-ai-agent-process)
      (kill-process ngrok-ai-agent-process)
      (setq ngrok-ai-agent-process nil)
      (message "Ngrok for ai-agent is stopping... Logs available -> /tmp/ngrok-ai-agent.log")))

  (defun start-ngrok-helpdesk ()
    "Start ngrok for the helpdesk."
    (interactive)
    (setq ngrok-helpdesk-process
          (start-process-shell-command
           "ngrok-helpdesk-process"  ;; Name of the process
           nil                       ;; No associated buffer
           "cd ~/gorgias/helpdesk && ngrok start --all --config aria-ngrok.yml --log=stdout > /tmp/ngrok-helpdesk.log"))
    (message "Ngrok for helpdesk is starting... Logs available -> /tmp/ngrok-helpdesk.log"))

  (defun stop-ngrok-helpdesk ()
    "Stop ngrok for the helpdesk."
    (interactive)
    (when (process-live-p ngrok-helpdesk-process)
      (kill-process ngrok-helpdesk-process)
      (setq ngrok-helpdesk-process nil)
      (message "Ngrok for helpdesk is stopping... Logs available -> /tmp/ngrok-helpdesk.log")))

  (defun start-ngrok-chat ()
    "Start ngrok for the chat."
    (interactive)
    (setq ngrok-chat-process
          (start-process-shell-command
           "ngrok-chat-process"  ;; Name of the process
           nil                   ;; No associated buffer
           "cd ~/gorgias/gorgias-chat && ngrok start --all --config aria-ngrok.yml --log=stdout > /tmp/ngrok-chat.log"))
    (message "Ngrok for chat is starting... Logs available -> /tmp/ngrok-chat.log"))

  (defun stop-ngrok-chat ()
    "Stop ngrok for the chat."
    (interactive)
    (when (process-live-p ngrok-chat-process)
      (kill-process ngrok-chat-process)
      (setq ngrok-chat-process nil)
      (message "Ngrok for chat is stopping... Logs available -> /tmp/ngrok-chat.log")))
#+end_src
** Start web apps
#+begin_src emacs-lisp :tangle lisp/custom-commands.el
  (defvar helpdesk-web-app-process nil "Process handle for the helpdesk web app.")
  (defvar gorgias-chat-client-process nil "Process handle for the gorgias chat client.")

  (defun start-helpdesk-web-app ()
    "Start the helpdesk web app (yarn serve) and track logs."
    (interactive)
    (setq helpdesk-web-app-process
          (start-process-shell-command
           "helpdesk-web-app-process" ;; Name of the process
           nil                        ;; No associated buffer
           "cd ~/gorgias/helpdesk-web-app && yarn serve > /tmp/helpdesk-web-app.log 2>&1"))
    (message "Helpdesk web app is starting... Logs available -> /tmp/helpdesk-web-app.log"))

  (defun stop-helpdesk-web-app ()
    "Stop the helpdesk web app."
    (interactive)
    (when (process-live-p helpdesk-web-app-process)
      (kill-process helpdesk-web-app-process)
      (setq helpdesk-web-app-process nil)
      (message "Helpdesk web app is stopping... Logs available -> /tmp/helpdesk-web-app.log")))

  (defun start-gorgias-chat-client ()
    "Start the Gorgias chat client (yarn watch:client) and track logs."
    (interactive)
    (setq gorgias-chat-client-process
          (start-process-shell-command
           "gorgias-chat-client-process" ;; Name of the process
           nil                           ;; No associated buffer
           "cd ~/gorgias/gorgias-chat && yarn watch:client > /tmp/gorgias-chat-client.log 2>&1"))
    (message "Gorgias chat client is starting... Logs available -> /tmp/gorgias-chat-client.log"))

  (defun stop-gorgias-chat-client ()
    "Stop the Gorgias chat client."
    (interactive)
    (when (process-live-p gorgias-chat-client-process)
      (kill-process gorgias-chat-client-process)
      (setq gorgias-chat-client-process nil)
      (message "Gorgias chat client is stoping... Logs available -> /tmp/gorgias-chat-client.log")))
#+end_src
** Start ai-agent configuration/feedback 
#+begin_src emacs-lisp :tangle lisp/custom-commands.el
  (defvar ai-agent-run-dev-process nil "Process handle for the ai agent app.")

  (defun start-ai-agent-run-dev ()
    "Start the ai-agent (npm run dev) and track logs."
    (interactive)
    (setq ai-agent-run-dev-process
          (start-process-shell-command
           "ai-agent-run-dev" ;; Name of the process
           nil                        ;; No associated buffer
           "cd ~/gorgias/ai-agent && npm run dev > /tmp/ai-agent-run-dev.log 2>&1"))
    (message "ai-agent-run-dev app is starting... Logs available -> /tmp/ai-agent-run-dev.log"))

  (defun stop-ai-agent-run-dev ()
    "Stop the ai-agent-run dev."
    (interactive)
    (when (process-live-p ai-agent-run-dev-process)
      (kill-process ai-agent-run-dev-process)
      (setq ai-agent-run-dev-process nil)
      (message "ai-agent-run-dev is stopping... Logs available -> /tmp/ai-agent-run-dev.log")))
#+end_src
** Global start/stop gorgias
#+begin_src emacs-lisp :tangle lisp/custom-commands.el
  (defun start-gorgias ()
    "Run docker-compose up for all Gorgias services."
    (interactive)
    (start-helpdesk-web-app)
    (start-gorgias-chat-client)
    (start-ngrok-ai-agent)
    (start-ngrok-helpdesk)
    (start-ngrok-chat)
    (start-ai-agent)
    (start-helpdesk)
    (start-chat)
    (start-help-center)
    (start-incoming)
    (start-sendgrid-inbound)
    (start-account-manager)
    (start-workflows))

  (defun stop-gorgias ()
    "Run docker-compose stop for all Gorgias services."
    (interactive)
    (stop-helpdesk-web-app)
    (stop-gorgias-chat-client)
    (stop-ngrok-ai-agent)
    (stop-ngrok-helpdesk)
    (stop-ngrok-chat)
    (stop-ai-agent)
    (stop-helpdesk)
    (stop-chat)
    (stop-help-center)
    (stop-incoming)
    (stop-sendgrid-inbound)
    (stop-account-manager)
    (stop-workflows))
#+end_src

* Bootstrap
#+begin_src emacs-lisp :tangle init.el
  (setenv "LIBRARY_PATH"
          (string-join
           '("/opt/homebrew/opt/gcc/lib/gcc/14"
             "/opt/homebrew/opt/libgccjit/lib/gcc/14"
             "/opt/homebrew/opt/gcc/lib/gcc/14/gcc/aarch64-apple-darwin23/14")
           ":"))
  (load-file (expand-file-name "lisp/straight.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/evil.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/org.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/appearance.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/minibuffer.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/help-utilities.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/versionning.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/project.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/coding.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/docker.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/vterm.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/calendar.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/embark.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/custom-commands.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/popup-function-calls.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/wgrep.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/ansi-support-in-buffers.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/gpg.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/ace-window.el" user-emacs-directory))
  (load-file (expand-file-name "lisp/exec-path.el" user-emacs-directory))
#+end_src
