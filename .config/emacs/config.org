#+TITLE: My Emacs Configuration
#+AUTHOR: Jaro
#+EMAIL: jaromods@pm.me


** TODO Need to allow minibuffer search in fuzzy order
** TODO Dired creates a new buffer everytime i select a folder
** TODO Need to understand why typescript needs restarts
** TODO projectile-switch-project binding
** TODO can't command in vterm
** TODO Fix eslint-fix-all not executed on save
By the way, managed to make it work with prettier using prettier-minor-mode which updates on save. Probably could look into that
** TODO How to list an entire file structure with lsp
** TODO [#A] Look into references in org mode                        :emacs:
** TODO [#A] Refiling done tasks
** TODO yasnipet, understand why parameter $0 is not working in cbel :emacs:
** TODO configure prescient-corfu                                    :emacs:
** TODO Fix tab in lsp as it is used in copilot                      :emacs:
* Core Packages
** Global settings
#+BEGIN_SRC emacs-lisp
    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (global-display-line-numbers-mode)
    (setq make-backup-files nil)
    (setq
        inhibit-startup-message t
        display-line-numbers-type 'relative)
    (setq mac-option-modifier 'meta)
    (setq auth-sources '("~/.authinfo.gpg"))
    (set-frame-font "SFMono Nerd Font-15")
    (global-visual-line-mode 1)
#+End_SRC


** Make Emacs faster
*** Adjust gc-cons-threshold
The default setting is too low for lsp-mode's needs due to the fact that client/server communication generates a lot of memory/garbage. You have two options:

- Set it to big number(100mb) like most of the popular starter kits like Spacemacs/Doom/Prelude, etc do:

```
  (setq gc-cons-threshold 100000000)
```

- Follow the method recommended by Gnu Emacs Maintainer Eli Zaretskii: "My suggestion is to repeatedly multiply gc-cons-threshold by 2 until you stop seeing significant improvements in responsiveness, and in any case not to increase by a factor larger than 100 or somesuch. If even a 100-fold increase doesn't help, there's some deeper problem with the Lisp code which produces so much garbage, or maybe GC is not the reason for slowdown." Source: <https://www.reddit.com/r/emacs/comments/brc05y/is_lspmode_too_slow_to_use_for_anyone_else/eofulix/>

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
#+END_SRC

*** Increase the amount of data which Emacs reads from the process#
#+BEGIN_SRC emacs-lisp
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+END_SRC
*** Use plists for deserialization.
lsp-mode can be compiled in 2 modes plist and hash-table based lsp-use-plists flag. plists provide better performance in deserialization and also put less presure than hash-tables.

I created in ./early-init.el
``` emacs-lisp
(setenv "LSP_USE_PLISTS" "true")
```

** Get path from shell
    #+BEGIN_SRC emacs-lisp
      (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))
      (when (daemonp)
      (exec-path-from-shell-initialize))
    #+END_SRC
** Evil mode
#+begin_src emacs-lisp
  (setq evil-want-keybinding nil)
  (use-package evil-leader
    :config
    (global-evil-leader-mode))

  (use-package evil-collection
    :after evil-leader
    :ensure t
    :config
    (evil-collection-init))

  (use-package evil
    :after evil-collection
    :init
    :config
    (evil-mode 1))
#+end_src

** Help in emacs
*** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
#+END_SRC

*** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :hook
    (org-mode . org-indent-mode)
  :config
    (setq org-agenda-files
	  '("~/Documents/org/")
	  org-ellipsis " â–¾"
	  org-log-done 'time)
    (evil-set-initial-state 'org-agenda-mode 'normal))
#+END_SRC
** Terminal emulation
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :init
    (defun vterm-process-query-on-exit ()
      (let ((proc (get-buffer-process (current-buffer))))
        (when proc
          (set-process-query-on-exit-flag proc nil))))
    :hook
      (vterm-mode . vterm-process-query-on-exit)
    :ensure t)
#+END_SRC

** Ansi Color
#+begin_src emacs-lisp
    (use-package ansi-color
      :config
      (defun colorize-ansi-compilation-buffer ()
        (when (eq major-mode 'compilation-mode)
          (ansi-color-apply-on-region compilation-filter-start (point-max))))
      :hook
      (compilation-filter . colorize-ansi-compilation-buffer))

#+end_src
* Additional packages
** Code snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))
#+END_SRC
** Window switching
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind ("M-o" . 'ace-window))
#+END_SRC

** Versioning
*** MAGIT
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :config
      (setq display-line-numbers-type 'visual)
      (global-display-line-numbers-mode t)
      (setq magit-section-disable-line-numbers nil)
      (setq magit-process-finish-apply-ansi-colors t)
      (evil-define-key 'normal magit-section-mode-map (kbd "1") nil)
      (evil-define-key 'normal magit-section-mode-map (kbd "2") nil)
      (evil-define-key 'normal magit-section-mode-map (kbd "3") nil)
      (evil-define-key 'normal magit-section-mode-map (kbd "4") nil)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
  (use-package forge
    :after magit)
  (use-package emojify
    :ensure t)
  (use-package code-review
    :straight (:host github :repo "phelrine/code-review" :branch "fix/closql-update")
    :ensure t
    :after magit
    :hook (code-review-mode . emojify-mode)
    :config
    (setq code-review-fill-column 80)
    (setq code-review-new-buffer-window-strategy #'switch-to-buffer-other-window)
    )

#+END_SRC

** Coding
*** Typescript
#+BEGIN_SRC emacs-lisp
  ;; CURRENTLY THIS DOES NOT WORK


    (use-package typescript-ts-mode
      :ensure t
      ;;:hook (lsp--before-save . show-hello-world-message)
      :mode ("\\.ts\\'" . typescript-ts-mode)
      )
#+END_SRC
** Org notifications
#+BEGIN_SRC emacs-lisp
(use-package org-wild-notifier
  :ensure t
  :config
  (setq alert-default-style 'osx-notifier)
  :init
  (org-wild-notifier-mode))
#+END_SRC
** Markdown
*** Editing
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("\\.md\\'" . gfm-mode)
  :commands (markdown-mode gfm-mode)
  :config
  (setq markdown-command "pandoc -t html5"))
#+END_SRC
** Copilot
#+BEGIN_SRC emacs-lisp
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :ensure t
    :bind (
      :map copilot-mode
     ;; ("<tab>" . 'copilot-accept-completion)
     ;; ("<backtab>" . 'copilot-accept-completion-by-word))
        ("<backtab>" . 'copilot-accept-completion))
    :init
    (copilot-mode))
#+END_SRC
** Workspace management
#+begin_src emacs-lisp
  (use-package perspective
    :straight t
    :bind
    ("C-x M-n" . 'persp-next)
    ("C-x M-p" . 'persp-prev)
    ("C-x M-s" . 'persp-state-save)
    ("C-x M-l" . 'persp-state-load)
    :custom
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :hook (
      (kill-emacs . persp-state-save))
    :config
      (setq persp-state-default-file "~/.config/emacs/persp-state")
    :init
    (persp-mode))
#+end_src

** Load theme
#+begin_src emacs-lisp
      ;;(use-package modus-themes)
      ;;(load-theme 'modus-vivendi-tritanopia)
      (use-package gruber-darker
        :straight (:host github :repo "rexim/gruber-darker-theme"))

#+end_src
** Dashboard (starting screen)
This fires up every time I open emacs

#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t
  :config
  (setq dashboard-banner-logo-title "Welcome to Emacs Dashboard")
  (setq dashboard-startup-banner "~/Pictures/jarodevs.png")
    ;; Value can be
    ;; - nil to display no banner
    ;; - 'official which displays the official emacs logo
    ;; - 'logo which displays an alternative emacs logo
    ;; - 1, 2 or 3 which displays one of the text banners
    ;; - "path/to/your/image.gif", "path/to/your/image.png", "path/to/your/text.txt" or "path/to/your/image.xbm" which displays whatever gif/image/text/xbm you would prefer
    ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")
  (setq dashboard-center-content t)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)))
  ;;(setq dashboard-icon-type 'all-the-icons)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq dashboard-projects-switch-function 'counsel-projectile-switch-project)
  (dashboard-setup-startup-hook)
  (defun cleanup ()
    "Displays dashboard and kills other buffers"
    (interactive)
    (dashboard-open)
    (kill-other-buffers)))
#+end_src
** Multiple vterm buffers
#+begin_src emacs-lisp
  (use-package multi-vterm
  	:config
  	(add-hook 'vterm-mode-hook
  			(lambda ()
  			(setq-local evil-insert-state-cursor 'box)
  			(evil-insert-state)))
  	(define-key vterm-mode-map [return]                      #'vterm-send-return)

  	(setq vterm-keymap-exceptions nil)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
  	(evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
  	(evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
  	(evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
  	(evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
  	(evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
  	(evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
  	(evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
  	(evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))
#+end_src
* Custom functions
** Kill other buffers but current one
#+begin_src emacs-lisp
     (defun kill-other-buffers ()
        "Kill all other buffers."
        (interactive)
        (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+end_src

